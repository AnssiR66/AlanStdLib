= Quick Start Guide for ALAN Standard Library
Anssi Räisänen; Tristano Ajmone
:StdLibVer: 2.2.0
:revnumber: {StdLibVer}-WIP
:revdate: 2022-05-30
:revremark: DRAFT
:version-label: StdLib
:lang: en
:doctype: book
// TOC Settings:
:toclevels: 5
:toc: left
// Sections Numbering:
:!part-signifier:
:!partnums:
:sectnums:
:sectnumlevels: 2
// Cross References:
:idprefix:
:xrefstyle: full
:chapter-refsig: Ch.
:section-refsig: Sec.
:appendix-refsig: App.
// Misc Settings:
:experimental: true
:icons: font
:linkattrs: true
:reproducible: true
:sectanchors:
// REPO ENV:
:docinfo: shared-head
:docinfodir: ../../_assets/rouge
:imagesdir: ../../_assets/images

// CUSTOM ATTRIBUTES DEFINITIONS:
:PathToMainDir: ../
include::../_shared-attributes.adoc[]

// Preamble
// ========

--
A very quick guide on how to setup your own ALAN adventure using the Standard Library.

If you need help or have any questions, you can contact the authors at the {AlanGoogle}.
--

.Original Doc
[NOTE]
=====================================
For comparison, see the
https://github.com/AnssiR66/AlanStdLib/blob/497378b/tbd/QuickStart.txt[original document^].
=====================================


.EDITORS' NOTE
[CAUTION]
=====================================
*TBD!* Since we had to add section titles to the document, because AsciiDoc requires it, we might as well better organize the document structure.

I think it would make sense to split the guide into two Parts:

* Part I: Adventure Set-up
** Copying the `new_game.alan` template and `StdLib/` folder into the adventure work folder.
** Editing the template to customize the banner info and ensuring the library files are reachable via the `Import` statements.
** Demonstrate how to compile and run the source adventure (via CLI or GUI compiler and interpreter).
* Part II: Quick Tips
** The various tips on how to use `my_game` to customize verbs and messages.
=====================================


[preface]
== Introduction

.EDITORS' NOTE
[CAUTION]
=====================================
*TBD!* Add intro text.
=====================================

.EDITORS' NOTE
[CAUTION]
=====================================
*TBD!* We should mentione the `new_game.alan` template here!

In fact, the entire guide should push for using the template, instead of hand-writing the code line by line.
The current sections would still hold true, they would simply become a commentary on the various parts of the template and how to customize it.

* [ ] Add to `new_game.alan` template region-tag comments so that we can selectively `include::` its various parts in this document.
=====================================


= Preparing The Files

Setting up your copy of the library and the adventure template.


== Work FOlder


* * *

= Original Text

.EDITORS' NOTE
[CAUTION]
=====================================
*TBD!* This part contains the original text ported to AsciiDoc.

We'll keep it until the new version is ready, so we can compare the new and original versions in the same place.
=====================================


== Importing The Library

.EDITORS' NOTE
[CAUTION]
=====================================
*TBD!* We should probably remove the instructions on how to import each module individually and just keep the `Import 'library.i'.` approach, especially now that the library has been split into more smaller modules.

Also, since there are no optional modules there's no benefit in importing them individually.
=====================================

Import the five library files (`lib_classes.i`, `lib_definitions.i`, `lib_locations.i`, `lib_messages.i` and `lib_verbs.i`) into your game source (make sure that they are in the same folder as your game source file).
Importing happens through placing the following code in your game source file:

[source,alan]
------------------------------------------------------------------------------
IMPORT 'lib_classes.i'.
IMPORT 'lib_definitions.i'.
IMPORT 'lib_locations.i'.
IMPORT 'lib_messages.i'.
IMPORT 'lib_verbs.i'.
------------------------------------------------------------------------------


Alternatively, you can just import the file `library.i` included in the library distribution package, and it automatically includes the five files above.
Make sure that `library.i` is in the same folder as the other library files and your own game source file:

[source,alan]
------------------------------------------------------------------------------
IMPORT 'library.i'.
------------------------------------------------------------------------------



== Defining `my_game`

Define the instance `my_game` in your own source file, in the following way:

[source,alan]
------------------------------------------------------------------------------
The my_game IsA DEFINITION_BLOCK
End the.
------------------------------------------------------------------------------

The above is the shortest possible formulation of this "`meta instance`" inside which you can define many things affecting the gameplay on a general level, for example default verb outcomes in your game.
Let's say you're not happy with the way the library defines the outcome of the examine verb for objects and actors ("`You see nothing special about [the object or actor].`")
Instead, you would like to have "`It's just an ordinary [object or actor].`"
Here, the `my_game` instance comes in handy.
You can change the default wording for the examine verb by editing the `my_game` instance like this:

.EDITORS' NOTE
[CAUTION]
=====================================
*TBD!* This example needs to be externalized and tested to see if it still holds true.

IRC, we've tweaked the `examine` verb in various places, so this example overriding it via `DOES ONLY` might interfere with class-specific implementations -- e.g. examining NPCs, which now lists carried and worn items -- and would also vanquish any custom `ex` description (maybe the `ex` attribute was added _after_ this document was written).

Probably an example with less drastic consequences would be better for a beginner's guide like this! E.g. changing the default description of the Hero, which is also more practical since it's something needed in most adventures.
=====================================


[source,alan]
------------------------------------------------------------------------------
The my_game IsA DEFINITION_BLOCK

  Verb examine
    Does only "It's just an ordinary" say obj. "."
  End verb.

End the.
------------------------------------------------------------------------------

Now, the default library message for examine has been replaced by your own message throughout the game.

The `my_game` instance can be placed anywhere in your source code (as long as it comes before the `Start` section and naturally is not inside any other instance).
It needs to be declared even if you didn't use it at all, because the game won't compile correctly without it.

Besides changing the default verb responses, you can edit check messages provided by the library if you wish.
You can also add a check of your own to any library verb, edit illegal parameter messages, and add general attributes needed in the game.


[source,alan]
------------------------------------------------------------------------------
The my_game IsA DEFINITION_BLOCK
  Has treasures_found 0.
  Has time_left 300.

  Verb examine
    Does only
      "Nothing special."  -- Your own response overriding the
  End verb.               -- library response for 'examine'

  Verb jump
    Check health of hero > 5    -- Your own check added here,
      Else "You feel too weak." -- and not to the library file!
    Does only
      "Wheeeee!"                -- Your own response overriding the
                                -- library response.
  End verb.

  Verb eat
    Check hero not tied_up
      Else "You can't possibly do that while tied up."
  End verb.

        -- Note that there is no DOES ONLY part in the 'eat' verb above.
        -- The library default outcome for the 'eat' verb would be carried
        -- out here if the check was passed. In other words, if you're happy
        -- with the default verb response (what happens after DOES), it's
        -- enough to just add a check to the verb in this way.



  Has check_obj_not_obj2_with "It would be rather absurd to $v something
                               with itself, don't you think?".

        -- This check message would be shown in all cases throughout the game
        -- when the hero would try to use an object with itself (that is, if
        -- you don't like the default that the library provides).

  Has illegal_parameter_there: "You can't $v there."

End the my_game.
------------------------------------------------------------------------------

All various attributes and editable messages for the `my_game` instance are listed further down in this manual.

.EDITORS' NOTE
[CAUTION]
=====================================
*TBD!* The above sentence seems to have been pasted from the Manual.
Should be changed by providing a cross reference to the _StdLib Manual_ section on library messages (possibly with a real link, although section titles and anchors are still WIP).

Alternatively, instruct the reader to look up the `lib_messages_library.i` source module to find out which messages are available.
=====================================


== Write Your Adventure

Go on designing your game as usual, implementing locations, actors, objects, and so forth.


-- end of the very quick start guide.

// EOF //
