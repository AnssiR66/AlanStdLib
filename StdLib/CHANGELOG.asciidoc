:StdLibVer: 2.2.0
:doctitle: Changelog for ALAN Standard Library v{StdLibVer}
:author: Anssi Räisänen
:email: <anssir66@hotmail.com>
:lang: en
// TOC Settings:
:toclevels: 2
:toc: left
// Sections Numbering:
:sectnums!:
// Cross References:
:xrefstyle: short
:section-refsig: Sect.
// Misc Settings:
:experimental:
:icons: font
:linkattrs:
:reproducible:
:sectanchors:

// Preamble

This changelog documents all changes to the Standard Library in each new release, covering new features, bug fixes, as well as updates to its documentation and other assets shipping in the distribution package.

TIP: For each new library release, we provide a list of all the bugs that were fixed, along with links to their associated Issues on GitHub, in order to provide authors with all the required information to check if these bugs might be affecting their past adventures and, if so, how they could fix them by migrating to the latest library version.

// >>> CUSTOM ATTRIBUTES FOR SUBSTITUTIONS >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
// Repository Issues Links:
:Issue_9: link:https://github.com/AnssiR66/AlanStdLib/issues/9[Issue&nbsp;#9^, title="See original Issue on GitHub"]
:Issue_24: link:https://github.com/AnssiR66/AlanStdLib/issues/24[Issue&nbsp;#24^, title="See original Issue on GitHub"]
:Issue_32: link:https://github.com/AnssiR66/AlanStdLib/issues/32[Issue&nbsp;#32^, title="See original Issue on GitHub"]
:Issue_37: link:https://github.com/AnssiR66/AlanStdLib/issues/37[Issue&nbsp;#37^, title="See original Issue on GitHub"]
:Issue_39: link:https://github.com/AnssiR66/AlanStdLib/issues/39[Issue&nbsp;#39^, title="See original Issue on GitHub"]
:Issue_57: link:https://github.com/AnssiR66/AlanStdLib/issues/57[Issue&nbsp;#57^, title="See original Issue on GitHub"]
:Issue_60: link:https://github.com/AnssiR66/AlanStdLib/issues/60[Issue&nbsp;#60^, title="See original Issue on GitHub"]
:Issue_61: link:https://github.com/AnssiR66/AlanStdLib/issues/61[Issue&nbsp;#61^, title="See original Issue on GitHub"]
:Issue_83: link:https://github.com/AnssiR66/AlanStdLib/issues/83[Issue&nbsp;#83^, title="See original Issue on GitHub"]
:Issue_96: link:https://github.com/AnssiR66/AlanStdLib/issues/96[Issue&nbsp;#96^, title="See original Issue on GitHub"]
:Issue_99: link:https://github.com/AnssiR66/AlanStdLib/issues/99[Issue&nbsp;#99^, title="See original Issue on GitHub"]
:Issue_106: link:https://github.com/AnssiR66/AlanStdLib/issues/106[Issue&nbsp;#106^, title="See original Issue on GitHub"]
:Issue_113: link:https://github.com/AnssiR66/AlanStdLib/issues/113[Issue&nbsp;#113^, title="See original Issue on GitHub"]
// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


== v2.2.0 -- 2020

Version `2.2.0` marks an important turning point for the Standard Library, introducing many new changes, not only in the library code but also in its development workflow and its documentation:

* *[red]#GitHub Hosting#* --
Development of the Standard Library has now moved to GitHub, allowing collaborative participation to the project via Git.
The new GitHub repository is now the official channel for the StdLib development and its distribution:

** link:https://github.com/AnssiR66/AlanStdLib[github.com/AnssiR66/AlanStdLib^, title="Visit the Standard Library repository on GitHub"]

* *[red]#AsciiDoc Documentation#* --
All library documentation has been ported to AsciiDoc, a powerful syntax for managing documentation in text-based source files which can be version controlled via Git, thus greatly simplifying collaborative editing on the documentation.
AsciiDoc is a format-agnostic syntax, meaning that the same source documents can now be converted (i.e. _built_) to numerous ouput formats, including HTML, PDF, and many others.
+
The new documentation is now built using Asciidoctor.
All documents are now distributed in HTML format, and some selected documents are also distributed in PDF format (e.g. _The StdLib Manual_, and other medium- to big-sized docs).
In the future, more formats might be supported (e.g. eBook formats), if there's a demand for them.

* *[red]#Semantic Versioning#* --
The library has now adopted the link:https://semver.org/[Semantic Versioning 2.0.0^,title="Visit Semantic Versioning website"] version scheme (hence the additional third digit in its new version number).
SemVer has become the most widely used versioning scheme, by adoption it the StdLib will benefit from better integration in the GitHub open source ecosystem.


=== StdLib Changes

The library sources have been thoroughly revisited, the code polished and optimized, various bugs fixed, and new features added.

* *[red]#Library Modules#* --
The library sources have been reorganized, splitting large modules into smaller ones:
+
--
** `lib_messages.i` has been renamed to `lib_messages_runtime.i`.
** `lib_definitions.i` was split into two additional modules:
*** `lib_messages_library.i` -- all the `my_game` string attributes for library responses.
*** `lib_verbs_restrictions.i` -- all the attributes and code dealing with actions restrictions.
** `lib_classes.i` was split into three additional modules:
*** `lib_actors.i` -- all the code relating to actors and their subclasses.
*** `lib_clothing.i` -- all the code for the clothing system.
*** `lib_liquid.i` -- all the code relating to liquids.
--
+
The Standard Library now consists of the following files:

** `library.i`
** `lib_actors.i`
** `lib_classes.i`
** `lib_clothing.i`
** `lib_definitions.i`
** `lib_liquid.i`
** `lib_locations.i`
** `lib_messages_library.i`
** `lib_messages_runtime.i`
** `lib_verbs.i`
** `lib_verbs_restrictions.i`

+
This new modular structure provides better compartmentalization of library features, each module focusing on specific aspects of the library.
End users wishing to study and customize the StdLib will find the new structure more intuitive and easier to work on.

* *[red]#Clothing#* --
The clothing system has been totally revamped, and it's now more flexible, more powerful, and easier to use.
The new system is very similar to the previous one, and migrating an adventure to StdLib `v2.2.0` might require just a few small adjustments (if any).

** The `worn` entity and the `wearing` set have been dropped, replaced by the `worn` boolean attribute, which is now used to track if a clothing items is being donned by a character (hero or NPC).
The `worn` attribute is defined on the `thing` class so that authors might also use it for wearables other than clothes (e.g. wearable devices, like VR headsets, etc.), by defining their own custom wearable classes, unconnected to the `clothing` class.

** The `inventory` and `examine <NPC>` commands will now produce separate lists for the items carried by the actor and the clothes being worn.

** When the  `wear` and `remove` commands fail, they now report which blocking-clothing items are preventing the action (instead of printing the full list of worn items, as in previous versions of the library).

** *[red]#Unconstrained Layers#* -- The clothing layer-coverage values are no longer restricted to a specific set of values (2, 4, 8, 16, 32, 64), now any valid integer can be freely used.
Clothes types are no longer bound to the _Clothing Table_ values of previous versions; authors are now free to assign any arbitrary coverage values to clothing layers.

*** Special clothings, like coats and skirts, are no longer hard-coded to specific layer-coverage values, and can now be implemented by setting two new boolean attributes:
**** `IS NOT blockslegs` -- skirt and coats don't prevent wearing/removing legsware from the layers below (i.e. although they both cover the `botcover` layer, they don't block access to the legs).
**** `IS twopieces` -- For items covering legs and torso via two separate pieces (e.g. a bikini) and which should be handled as a single clothing item (i.e. worn/removed in single action).
Unlike a single-piece legs and torso item (e.g. a one-piece swimming suite), a `twopieces` item like a bikini can be worn/removed while wearing a skirt.

** The new `facecover` attribute was added to allow handling goggles, fake beards, masks, etc., independently from the `headcover` layer.

** The `worn_clothing_check` EVENT was removed because it was crashing the interpreter when moving around worn clothing items (see {Issue_57}).

** The library now implements a new strategy for tracking worn clothing items, preventing any verb from dislocating a worn item from its wearing actor, and ensuring that any verb which legitimately dislocates an item worn by an actor (e.g. dropping it, throwing it giving it to an NPC, or asking a compliant NPC for it) also changes its status to `NOT worn`.

* *[red]#Library Attributes#* -- The behavior for some library attributes has been improved, without breaking backward compatibility:

** *[red]#Scenery#* --
Now the `examine` verb will always honor the description of an `ex` attribute of a scenery object, if defined; otherwise, it will behave as before, printing "`The [object] is not important.`" (see {Issue_99}).
This allows scenery props to optionally contribute to the game's atmosphere and mood by providing some extra text when examined.

** *[red]#Readable#* --
Now the `examine` verb will always honor the description of an `ex` attribute of a `readable` object, if present; otherwise it will behave like `read`, as before, printing the `text` string (see {Issue_9}).
This allows to implement readable objects that can be both examined and read, producing a description of the object and its printed text respectively -- e.g. it's useful to provide the physical description of an ancient magic book on examination, and let the `read` verb show its contents instead; whereas for a simple sticky note, having `examine` behave like `read` is more practical.

* *[red]#Honoring Custom `ex` Description#* --
Now a non-empty `ex` attribute will be always honored when examining a `readable` object (see {Issue_9}), a `scenery` object (see {Issue_99}), and instances of `liquid` and `listed_container` (see {Issue_37}).

* *[red]#Restrcited Actions#* --
The code for handling restriced actions has been optimized by reducing its size.

** *[red]#New Restriction Level 5 (YES/NO)#* --
A new restriction level (`restricted_level 5`) was added, specifically targeting situations in which the player can only answer YES or NO (see {Issue_113}).
During this level, only the `yes` and ``'no'`` verbs are allowed, and the `restricted_response` message is automatically changed to "`Please answer YES or NO.`", and then restored to its preceding value when a restriction level switch occurs.

* *[red]#Dropped '`verbose`' and '`brief`'#* --
The meta-berbs `verbose` and `brief` were removed from the library due to `brief` failing to work as expected, because ALAN resets the `VISITS` counter every time an attribute of a `location` instance changes state or value (see {Issue_32}).

// * *[red]#XXXXXXXXXXX#* --


////
@TODO: PENDING CHANGES TO MENTION:


////

=== Bug Fixes

Various library bugs were discovered and fixed:


////
@TODO: CHECK FULL LIST OF CLOSED BUG-ISSUES:

https://github.com/AnssiR66/AlanStdLib/issues?q=is%3Aissue+is%3Aclosed+label%3A%22%3Askull%3A+bug%22

--------------------------------------------------------------------------------
#18 — Verb 'ask_for' and Compliance
https://github.com/AnssiR66/AlanStdLib/issues/18
--------------------------------------------------------------------------------

////

* *[red]#Clothing#* -- bugs related to the clothing system:
** Moving around worn clothing items could crash the interpreter due to a stack error (see {Issue_57}).
** Various verbs dislocating worn items from its wearer were not updating the item's status to `NOT worn`, leading to erratic behavior in verbs with special worn-status checks when handling clothes (see {Issue_60}).
** Clothes nested inside worn clothing items (e.g. a pair of gloves inside the coat pockets) were also marked as being worn during game initialization (see {Issue_61}).

* *[red]#Liquids#* -- bugs related to the instances of `liquid` and their `vessel`:
** The `fill_with` verb was always changing the liquid's vessel to the destination container, regardless of whether the action succeeded or not (see {Issue_39}).
The problem was fixed by editing the `check_vessel` EVENT so that every turn LISTED_CONTAINERs are iterated and every liquid found directly in a container will have its `vessel` attribute set to it.
Furthermore, the `fill_with` VERB on `liquid` was deleted since it's no longer needed now.


* *[red]#Room and Site Objects#* --
Custom descriptions for ROOM- (`floor_desc`, etc.) and SITE-objects (`ground_desc`, etc.) were not being honored; the problem was fixed and now they work as expected (see {Issue_83}).

* *[red]#Dark Locations#* --
Fixed some small bugs and inconsistencies with the mechanics that handle the `lit` attributes of normal locations and instances of `DARK_LOCATION` (see {Issue_96}).

* *[red]#Implicit Taking#* --
Improved verbs that attempt implicit taking; now the implicit taking message is printed _before_ attempting the action (see {Issue_106}), so if re-locating the object fails due to `EXTRACT` constrains (and the verb aborts), the message is not left unprinted; and if the `EXTRACT` clause of the target object prints a message, it won't be out-of-order.

* *[red]#Actions Restrictions#* --
Restriction Level 2 didn't Include the verbs `talk` and `talk_to` (see {Issue_24}).

// * *[red]#XXXXXXXXXXX#* --


== v2.1 -- 2018-05-27

* Added verb restrictions
* Polished and expanded the manual



== v2.0 -- 2016-05-15

First version.

// EOF //
